package com.zack.xjht.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zack.xjht.entity.UrgentOutBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "URGENT_OUT_BEAN".
*/
public class UrgentOutBeanDao extends AbstractDao<UrgentOutBean, Long> {

    public static final String TABLENAME = "URGENT_OUT_BEAN";

    /**
     * Properties of entity UrgentOutBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Remark = new Property(0, String.class, "remark", false, "REMARK");
        public final static Property TId = new Property(1, Long.class, "tId", true, "_id");
        public final static Property GunCabinetId = new Property(2, String.class, "gunCabinetId", false, "GUN_CABINET_ID");
        public final static Property Apply = new Property(3, String.class, "apply", false, "APPLY");
        public final static Property Approval = new Property(4, String.class, "approval", false, "APPROVAL");
        public final static Property ApplyName = new Property(5, String.class, "applyName", false, "APPLY_NAME");
        public final static Property ApprovalName = new Property(6, String.class, "approvalName", false, "APPROVAL_NAME");
        public final static Property OutTime = new Property(7, String.class, "outTime", false, "OUT_TIME");
        public final static Property InTime = new Property(8, String.class, "inTime", false, "IN_TIME");
        public final static Property UpdateTime = new Property(9, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property UrgentTaskId = new Property(10, String.class, "urgentTaskId", false, "URGENT_TASK_ID");
        public final static Property IsGetUpload = new Property(11, boolean.class, "isGetUpload", false, "IS_GET_UPLOAD");
        public final static Property IsBackUpload = new Property(12, boolean.class, "isBackUpload", false, "IS_BACK_UPLOAD");
        public final static Property TaskFinish = new Property(13, boolean.class, "taskFinish", false, "TASK_FINISH");
    }

    private DaoSession daoSession;


    public UrgentOutBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UrgentOutBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"URGENT_OUT_BEAN\" (" + //
                "\"REMARK\" TEXT," + // 0: remark
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: tId
                "\"GUN_CABINET_ID\" TEXT," + // 2: gunCabinetId
                "\"APPLY\" TEXT," + // 3: apply
                "\"APPROVAL\" TEXT," + // 4: approval
                "\"APPLY_NAME\" TEXT," + // 5: applyName
                "\"APPROVAL_NAME\" TEXT," + // 6: approvalName
                "\"OUT_TIME\" TEXT," + // 7: outTime
                "\"IN_TIME\" TEXT," + // 8: inTime
                "\"UPDATE_TIME\" TEXT," + // 9: updateTime
                "\"URGENT_TASK_ID\" TEXT," + // 10: urgentTaskId
                "\"IS_GET_UPLOAD\" INTEGER NOT NULL ," + // 11: isGetUpload
                "\"IS_BACK_UPLOAD\" INTEGER NOT NULL ," + // 12: isBackUpload
                "\"TASK_FINISH\" INTEGER NOT NULL );"); // 13: taskFinish
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"URGENT_OUT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UrgentOutBean entity) {
        stmt.clearBindings();
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(1, remark);
        }
 
        Long tId = entity.getTId();
        if (tId != null) {
            stmt.bindLong(2, tId);
        }
 
        String gunCabinetId = entity.getGunCabinetId();
        if (gunCabinetId != null) {
            stmt.bindString(3, gunCabinetId);
        }
 
        String apply = entity.getApply();
        if (apply != null) {
            stmt.bindString(4, apply);
        }
 
        String approval = entity.getApproval();
        if (approval != null) {
            stmt.bindString(5, approval);
        }
 
        String applyName = entity.getApplyName();
        if (applyName != null) {
            stmt.bindString(6, applyName);
        }
 
        String approvalName = entity.getApprovalName();
        if (approvalName != null) {
            stmt.bindString(7, approvalName);
        }
 
        String outTime = entity.getOutTime();
        if (outTime != null) {
            stmt.bindString(8, outTime);
        }
 
        String inTime = entity.getInTime();
        if (inTime != null) {
            stmt.bindString(9, inTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(10, updateTime);
        }
 
        String urgentTaskId = entity.getUrgentTaskId();
        if (urgentTaskId != null) {
            stmt.bindString(11, urgentTaskId);
        }
        stmt.bindLong(12, entity.getIsGetUpload() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsBackUpload() ? 1L: 0L);
        stmt.bindLong(14, entity.getTaskFinish() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UrgentOutBean entity) {
        stmt.clearBindings();
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(1, remark);
        }
 
        Long tId = entity.getTId();
        if (tId != null) {
            stmt.bindLong(2, tId);
        }
 
        String gunCabinetId = entity.getGunCabinetId();
        if (gunCabinetId != null) {
            stmt.bindString(3, gunCabinetId);
        }
 
        String apply = entity.getApply();
        if (apply != null) {
            stmt.bindString(4, apply);
        }
 
        String approval = entity.getApproval();
        if (approval != null) {
            stmt.bindString(5, approval);
        }
 
        String applyName = entity.getApplyName();
        if (applyName != null) {
            stmt.bindString(6, applyName);
        }
 
        String approvalName = entity.getApprovalName();
        if (approvalName != null) {
            stmt.bindString(7, approvalName);
        }
 
        String outTime = entity.getOutTime();
        if (outTime != null) {
            stmt.bindString(8, outTime);
        }
 
        String inTime = entity.getInTime();
        if (inTime != null) {
            stmt.bindString(9, inTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(10, updateTime);
        }
 
        String urgentTaskId = entity.getUrgentTaskId();
        if (urgentTaskId != null) {
            stmt.bindString(11, urgentTaskId);
        }
        stmt.bindLong(12, entity.getIsGetUpload() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsBackUpload() ? 1L: 0L);
        stmt.bindLong(14, entity.getTaskFinish() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(UrgentOutBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public UrgentOutBean readEntity(Cursor cursor, int offset) {
        UrgentOutBean entity = new UrgentOutBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // remark
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gunCabinetId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // apply
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // approval
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // applyName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // approvalName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // outTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // inTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // updateTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // urgentTaskId
            cursor.getShort(offset + 11) != 0, // isGetUpload
            cursor.getShort(offset + 12) != 0, // isBackUpload
            cursor.getShort(offset + 13) != 0 // taskFinish
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UrgentOutBean entity, int offset) {
        entity.setRemark(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGunCabinetId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApply(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApproval(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApplyName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setApprovalName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOutTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUrgentTaskId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsGetUpload(cursor.getShort(offset + 11) != 0);
        entity.setIsBackUpload(cursor.getShort(offset + 12) != 0);
        entity.setTaskFinish(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UrgentOutBean entity, long rowId) {
        entity.setTId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UrgentOutBean entity) {
        if(entity != null) {
            return entity.getTId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UrgentOutBean entity) {
        return entity.getTId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
