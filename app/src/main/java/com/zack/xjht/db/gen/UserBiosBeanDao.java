package com.zack.xjht.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zack.xjht.entity.UserBiosBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BIOS_BEAN".
*/
public class UserBiosBeanDao extends AbstractDao<UserBiosBean, Long> {

    public static final String TABLENAME = "USER_BIOS_BEAN";

    /**
     * Properties of entity UserBiosBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BId = new Property(0, Long.class, "bId", true, "_id");
        public final static Property BiometricsKey = new Property(1, String.class, "biometricsKey", false, "BIOMETRICS_KEY");
        public final static Property BiometricsPart = new Property(2, String.class, "biometricsPart", false, "BIOMETRICS_PART");
        public final static Property Id = new Property(3, String.class, "id", false, "ID");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property BiometricsType = new Property(5, String.class, "biometricsType", false, "BIOMETRICS_TYPE");
        public final static Property UserId = new Property(6, int.class, "userId", false, "USER_ID");
        public final static Property BiometricsNumber = new Property(7, int.class, "biometricsNumber", false, "BIOMETRICS_NUMBER");
    }


    public UserBiosBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBiosBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BIOS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: bId
                "\"BIOMETRICS_KEY\" TEXT," + // 1: biometricsKey
                "\"BIOMETRICS_PART\" TEXT," + // 2: biometricsPart
                "\"ID\" TEXT," + // 3: id
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"BIOMETRICS_TYPE\" TEXT," + // 5: biometricsType
                "\"USER_ID\" INTEGER NOT NULL ," + // 6: userId
                "\"BIOMETRICS_NUMBER\" INTEGER NOT NULL );"); // 7: biometricsNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BIOS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBiosBean entity) {
        stmt.clearBindings();
 
        Long bId = entity.getBId();
        if (bId != null) {
            stmt.bindLong(1, bId);
        }
 
        String biometricsKey = entity.getBiometricsKey();
        if (biometricsKey != null) {
            stmt.bindString(2, biometricsKey);
        }
 
        String biometricsPart = entity.getBiometricsPart();
        if (biometricsPart != null) {
            stmt.bindString(3, biometricsPart);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String biometricsType = entity.getBiometricsType();
        if (biometricsType != null) {
            stmt.bindString(6, biometricsType);
        }
        stmt.bindLong(7, entity.getUserId());
        stmt.bindLong(8, entity.getBiometricsNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBiosBean entity) {
        stmt.clearBindings();
 
        Long bId = entity.getBId();
        if (bId != null) {
            stmt.bindLong(1, bId);
        }
 
        String biometricsKey = entity.getBiometricsKey();
        if (biometricsKey != null) {
            stmt.bindString(2, biometricsKey);
        }
 
        String biometricsPart = entity.getBiometricsPart();
        if (biometricsPart != null) {
            stmt.bindString(3, biometricsPart);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String biometricsType = entity.getBiometricsType();
        if (biometricsType != null) {
            stmt.bindString(6, biometricsType);
        }
        stmt.bindLong(7, entity.getUserId());
        stmt.bindLong(8, entity.getBiometricsNumber());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBiosBean readEntity(Cursor cursor, int offset) {
        UserBiosBean entity = new UserBiosBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // biometricsKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // biometricsPart
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // biometricsType
            cursor.getInt(offset + 6), // userId
            cursor.getInt(offset + 7) // biometricsNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBiosBean entity, int offset) {
        entity.setBId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBiometricsKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBiometricsPart(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBiometricsType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.getInt(offset + 6));
        entity.setBiometricsNumber(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBiosBean entity, long rowId) {
        entity.setBId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBiosBean entity) {
        if(entity != null) {
            return entity.getBId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBiosBean entity) {
        return entity.getBId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
