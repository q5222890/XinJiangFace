package com.zack.xjht.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zack.xjht.entity.OperLogBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPER_LOG_BEAN".
*/
public class OperLogBeanDao extends AbstractDao<OperLogBean, Long> {

    public static final String TABLENAME = "OPER_LOG_BEAN";

    /**
     * Properties of entity OperLogBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GunManagementId = new Property(1, String.class, "gunManagementId", false, "GUN_MANAGEMENT_ID");
        public final static Property GunManagementName = new Property(2, String.class, "gunManagementName", false, "GUN_MANAGEMENT_NAME");
        public final static Property ApproveId = new Property(3, String.class, "approveId", false, "APPROVE_ID");
        public final static Property ApproveName = new Property(4, String.class, "approveName", false, "APPROVE_NAME");
        public final static Property PoliceId = new Property(5, String.class, "policeId", false, "POLICE_ID");
        public final static Property PoliceName = new Property(6, String.class, "policeName", false, "POLICE_NAME");
        public final static Property LoseCount = new Property(7, String.class, "loseCount", false, "LOSE_COUNT");
        public final static Property InTime = new Property(8, String.class, "inTime", false, "IN_TIME");
        public final static Property InCount = new Property(9, String.class, "inCount", false, "IN_COUNT");
        public final static Property OutTime = new Property(10, String.class, "outTime", false, "OUT_TIME");
        public final static Property OutCount = new Property(11, String.class, "outCount", false, "OUT_COUNT");
        public final static Property ObjectId = new Property(12, String.class, "objectId", false, "OBJECT_ID");
        public final static Property GunCabinetLocationId = new Property(13, String.class, "gunCabinetLocationId", false, "GUN_CABINET_LOCATION_ID");
        public final static Property GunCabinetId = new Property(14, String.class, "gunCabinetId", false, "GUN_CABINET_ID");
        public final static Property Status = new Property(15, String.class, "status", false, "STATUS");
        public final static Property UploadStatus = new Property(16, int.class, "uploadStatus", false, "UPLOAD_STATUS");
        public final static Property TaskId = new Property(17, long.class, "taskId", false, "TASK_ID");
        public final static Property TaskItemId = new Property(18, long.class, "taskItemId", false, "TASK_ITEM_ID");
        public final static Property Type = new Property(19, String.class, "type", false, "TYPE");
        public final static Property TypeName = new Property(20, String.class, "typeName", false, "TYPE_NAME");
        public final static Property GunNo = new Property(21, String.class, "gunNo", false, "GUN_NO");
    }


    public OperLogBeanDao(DaoConfig config) {
        super(config);
    }
    
    public OperLogBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPER_LOG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GUN_MANAGEMENT_ID\" TEXT," + // 1: gunManagementId
                "\"GUN_MANAGEMENT_NAME\" TEXT," + // 2: gunManagementName
                "\"APPROVE_ID\" TEXT," + // 3: approveId
                "\"APPROVE_NAME\" TEXT," + // 4: approveName
                "\"POLICE_ID\" TEXT," + // 5: policeId
                "\"POLICE_NAME\" TEXT," + // 6: policeName
                "\"LOSE_COUNT\" TEXT," + // 7: loseCount
                "\"IN_TIME\" TEXT," + // 8: inTime
                "\"IN_COUNT\" TEXT," + // 9: inCount
                "\"OUT_TIME\" TEXT," + // 10: outTime
                "\"OUT_COUNT\" TEXT," + // 11: outCount
                "\"OBJECT_ID\" TEXT," + // 12: objectId
                "\"GUN_CABINET_LOCATION_ID\" TEXT," + // 13: gunCabinetLocationId
                "\"GUN_CABINET_ID\" TEXT," + // 14: gunCabinetId
                "\"STATUS\" TEXT," + // 15: status
                "\"UPLOAD_STATUS\" INTEGER NOT NULL ," + // 16: uploadStatus
                "\"TASK_ID\" INTEGER NOT NULL ," + // 17: taskId
                "\"TASK_ITEM_ID\" INTEGER NOT NULL ," + // 18: taskItemId
                "\"TYPE\" TEXT," + // 19: type
                "\"TYPE_NAME\" TEXT," + // 20: typeName
                "\"GUN_NO\" TEXT);"); // 21: gunNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPER_LOG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OperLogBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gunManagementId = entity.getGunManagementId();
        if (gunManagementId != null) {
            stmt.bindString(2, gunManagementId);
        }
 
        String gunManagementName = entity.getGunManagementName();
        if (gunManagementName != null) {
            stmt.bindString(3, gunManagementName);
        }
 
        String approveId = entity.getApproveId();
        if (approveId != null) {
            stmt.bindString(4, approveId);
        }
 
        String approveName = entity.getApproveName();
        if (approveName != null) {
            stmt.bindString(5, approveName);
        }
 
        String policeId = entity.getPoliceId();
        if (policeId != null) {
            stmt.bindString(6, policeId);
        }
 
        String policeName = entity.getPoliceName();
        if (policeName != null) {
            stmt.bindString(7, policeName);
        }
 
        String loseCount = entity.getLoseCount();
        if (loseCount != null) {
            stmt.bindString(8, loseCount);
        }
 
        String inTime = entity.getInTime();
        if (inTime != null) {
            stmt.bindString(9, inTime);
        }
 
        String inCount = entity.getInCount();
        if (inCount != null) {
            stmt.bindString(10, inCount);
        }
 
        String outTime = entity.getOutTime();
        if (outTime != null) {
            stmt.bindString(11, outTime);
        }
 
        String outCount = entity.getOutCount();
        if (outCount != null) {
            stmt.bindString(12, outCount);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(13, objectId);
        }
 
        String gunCabinetLocationId = entity.getGunCabinetLocationId();
        if (gunCabinetLocationId != null) {
            stmt.bindString(14, gunCabinetLocationId);
        }
 
        String gunCabinetId = entity.getGunCabinetId();
        if (gunCabinetId != null) {
            stmt.bindString(15, gunCabinetId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
        stmt.bindLong(17, entity.getUploadStatus());
        stmt.bindLong(18, entity.getTaskId());
        stmt.bindLong(19, entity.getTaskItemId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(20, type);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(21, typeName);
        }
 
        String gunNo = entity.getGunNo();
        if (gunNo != null) {
            stmt.bindString(22, gunNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OperLogBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gunManagementId = entity.getGunManagementId();
        if (gunManagementId != null) {
            stmt.bindString(2, gunManagementId);
        }
 
        String gunManagementName = entity.getGunManagementName();
        if (gunManagementName != null) {
            stmt.bindString(3, gunManagementName);
        }
 
        String approveId = entity.getApproveId();
        if (approveId != null) {
            stmt.bindString(4, approveId);
        }
 
        String approveName = entity.getApproveName();
        if (approveName != null) {
            stmt.bindString(5, approveName);
        }
 
        String policeId = entity.getPoliceId();
        if (policeId != null) {
            stmt.bindString(6, policeId);
        }
 
        String policeName = entity.getPoliceName();
        if (policeName != null) {
            stmt.bindString(7, policeName);
        }
 
        String loseCount = entity.getLoseCount();
        if (loseCount != null) {
            stmt.bindString(8, loseCount);
        }
 
        String inTime = entity.getInTime();
        if (inTime != null) {
            stmt.bindString(9, inTime);
        }
 
        String inCount = entity.getInCount();
        if (inCount != null) {
            stmt.bindString(10, inCount);
        }
 
        String outTime = entity.getOutTime();
        if (outTime != null) {
            stmt.bindString(11, outTime);
        }
 
        String outCount = entity.getOutCount();
        if (outCount != null) {
            stmt.bindString(12, outCount);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(13, objectId);
        }
 
        String gunCabinetLocationId = entity.getGunCabinetLocationId();
        if (gunCabinetLocationId != null) {
            stmt.bindString(14, gunCabinetLocationId);
        }
 
        String gunCabinetId = entity.getGunCabinetId();
        if (gunCabinetId != null) {
            stmt.bindString(15, gunCabinetId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
        stmt.bindLong(17, entity.getUploadStatus());
        stmt.bindLong(18, entity.getTaskId());
        stmt.bindLong(19, entity.getTaskItemId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(20, type);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(21, typeName);
        }
 
        String gunNo = entity.getGunNo();
        if (gunNo != null) {
            stmt.bindString(22, gunNo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OperLogBean readEntity(Cursor cursor, int offset) {
        OperLogBean entity = new OperLogBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gunManagementId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gunManagementName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // approveId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // approveName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // policeId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // policeName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // loseCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // inTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // inCount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // outTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // outCount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // objectId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // gunCabinetLocationId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // gunCabinetId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // status
            cursor.getInt(offset + 16), // uploadStatus
            cursor.getLong(offset + 17), // taskId
            cursor.getLong(offset + 18), // taskItemId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // type
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // typeName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // gunNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OperLogBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGunManagementId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGunManagementName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApproveId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApproveName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPoliceId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPoliceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLoseCount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInCount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOutTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOutCount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setObjectId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGunCabinetLocationId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGunCabinetId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUploadStatus(cursor.getInt(offset + 16));
        entity.setTaskId(cursor.getLong(offset + 17));
        entity.setTaskItemId(cursor.getLong(offset + 18));
        entity.setType(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTypeName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setGunNo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OperLogBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OperLogBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OperLogBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
