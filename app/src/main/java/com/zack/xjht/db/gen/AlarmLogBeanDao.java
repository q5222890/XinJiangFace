package com.zack.xjht.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zack.xjht.entity.AlarmLogBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_LOG_BEAN".
*/
public class AlarmLogBeanDao extends AbstractDao<AlarmLogBean, Long> {

    public static final String TABLENAME = "ALARM_LOG_BEAN";

    /**
     * Properties of entity AlarmLogBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GunCabinetId = new Property(1, String.class, "gunCabinetId", false, "GUN_CABINET_ID");
        public final static Property WarningType = new Property(2, String.class, "warningType", false, "WARNING_TYPE");
        public final static Property WarningTime = new Property(3, String.class, "warningTime", false, "WARNING_TIME");
        public final static Property RelieveWarningTime = new Property(4, String.class, "relieveWarningTime", false, "RELIEVE_WARNING_TIME");
        public final static Property RelieveId = new Property(5, String.class, "relieveId", false, "RELIEVE_ID");
        public final static Property RelieveName = new Property(6, String.class, "relieveName", false, "RELIEVE_NAME");
        public final static Property WarningContent = new Property(7, String.class, "warningContent", false, "WARNING_CONTENT");
        public final static Property WarningState = new Property(8, String.class, "warningState", false, "WARNING_STATE");
        public final static Property IsSync = new Property(9, boolean.class, "isSync", false, "IS_SYNC");
    }


    public AlarmLogBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmLogBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_LOG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GUN_CABINET_ID\" TEXT," + // 1: gunCabinetId
                "\"WARNING_TYPE\" TEXT," + // 2: warningType
                "\"WARNING_TIME\" TEXT," + // 3: warningTime
                "\"RELIEVE_WARNING_TIME\" TEXT," + // 4: relieveWarningTime
                "\"RELIEVE_ID\" TEXT," + // 5: relieveId
                "\"RELIEVE_NAME\" TEXT," + // 6: relieveName
                "\"WARNING_CONTENT\" TEXT," + // 7: warningContent
                "\"WARNING_STATE\" TEXT," + // 8: warningState
                "\"IS_SYNC\" INTEGER NOT NULL );"); // 9: isSync
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_LOG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmLogBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gunCabinetId = entity.getGunCabinetId();
        if (gunCabinetId != null) {
            stmt.bindString(2, gunCabinetId);
        }
 
        String warningType = entity.getWarningType();
        if (warningType != null) {
            stmt.bindString(3, warningType);
        }
 
        String warningTime = entity.getWarningTime();
        if (warningTime != null) {
            stmt.bindString(4, warningTime);
        }
 
        String relieveWarningTime = entity.getRelieveWarningTime();
        if (relieveWarningTime != null) {
            stmt.bindString(5, relieveWarningTime);
        }
 
        String relieveId = entity.getRelieveId();
        if (relieveId != null) {
            stmt.bindString(6, relieveId);
        }
 
        String relieveName = entity.getRelieveName();
        if (relieveName != null) {
            stmt.bindString(7, relieveName);
        }
 
        String warningContent = entity.getWarningContent();
        if (warningContent != null) {
            stmt.bindString(8, warningContent);
        }
 
        String warningState = entity.getWarningState();
        if (warningState != null) {
            stmt.bindString(9, warningState);
        }
        stmt.bindLong(10, entity.getIsSync() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmLogBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gunCabinetId = entity.getGunCabinetId();
        if (gunCabinetId != null) {
            stmt.bindString(2, gunCabinetId);
        }
 
        String warningType = entity.getWarningType();
        if (warningType != null) {
            stmt.bindString(3, warningType);
        }
 
        String warningTime = entity.getWarningTime();
        if (warningTime != null) {
            stmt.bindString(4, warningTime);
        }
 
        String relieveWarningTime = entity.getRelieveWarningTime();
        if (relieveWarningTime != null) {
            stmt.bindString(5, relieveWarningTime);
        }
 
        String relieveId = entity.getRelieveId();
        if (relieveId != null) {
            stmt.bindString(6, relieveId);
        }
 
        String relieveName = entity.getRelieveName();
        if (relieveName != null) {
            stmt.bindString(7, relieveName);
        }
 
        String warningContent = entity.getWarningContent();
        if (warningContent != null) {
            stmt.bindString(8, warningContent);
        }
 
        String warningState = entity.getWarningState();
        if (warningState != null) {
            stmt.bindString(9, warningState);
        }
        stmt.bindLong(10, entity.getIsSync() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AlarmLogBean readEntity(Cursor cursor, int offset) {
        AlarmLogBean entity = new AlarmLogBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gunCabinetId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // warningType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // warningTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // relieveWarningTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // relieveId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // relieveName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // warningContent
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // warningState
            cursor.getShort(offset + 9) != 0 // isSync
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmLogBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGunCabinetId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWarningType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWarningTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRelieveWarningTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRelieveId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRelieveName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWarningContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWarningState(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSync(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlarmLogBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlarmLogBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmLogBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
