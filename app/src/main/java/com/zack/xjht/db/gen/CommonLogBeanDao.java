package com.zack.xjht.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zack.xjht.entity.CommonLogBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMON_LOG_BEAN".
*/
public class CommonLogBeanDao extends AbstractDao<CommonLogBean, Long> {

    public static final String TABLENAME = "COMMON_LOG_BEAN";

    /**
     * Properties of entity CommonLogBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AddTime = new Property(1, long.class, "addTime", false, "ADD_TIME");
        public final static Property UpdateTime = new Property(2, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(5, String.class, "userName", false, "USER_NAME");
        public final static Property Mac = new Property(6, String.class, "mac", false, "MAC");
        public final static Property IsSync = new Property(7, boolean.class, "isSync", false, "IS_SYNC");
    }


    public CommonLogBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommonLogBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMON_LOG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADD_TIME\" INTEGER NOT NULL ," + // 1: addTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 2: updateTime
                "\"CONTENT\" TEXT," + // 3: content
                "\"USER_ID\" TEXT," + // 4: userId
                "\"USER_NAME\" TEXT," + // 5: userName
                "\"MAC\" TEXT," + // 6: mac
                "\"IS_SYNC\" INTEGER NOT NULL );"); // 7: isSync
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMON_LOG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommonLogBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAddTime());
        stmt.bindLong(3, entity.getUpdateTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(7, mac);
        }
        stmt.bindLong(8, entity.getIsSync() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommonLogBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAddTime());
        stmt.bindLong(3, entity.getUpdateTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(7, mac);
        }
        stmt.bindLong(8, entity.getIsSync() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommonLogBean readEntity(Cursor cursor, int offset) {
        CommonLogBean entity = new CommonLogBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // addTime
            cursor.getLong(offset + 2), // updateTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mac
            cursor.getShort(offset + 7) != 0 // isSync
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommonLogBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddTime(cursor.getLong(offset + 1));
        entity.setUpdateTime(cursor.getLong(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMac(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsSync(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommonLogBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommonLogBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommonLogBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
