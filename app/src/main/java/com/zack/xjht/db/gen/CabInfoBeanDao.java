package com.zack.xjht.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zack.xjht.entity.CabInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAB_INFO_BEAN".
*/
public class CabInfoBeanDao extends AbstractDao<CabInfoBean, Long> {

    public static final String TABLENAME = "CAB_INFO_BEAN";

    /**
     * Properties of entity CabInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CId = new Property(0, Long.class, "cId", true, "_id");
        public final static Property GunCabinetType = new Property(1, String.class, "gunCabinetType", false, "GUN_CABINET_TYPE");
        public final static Property GunRoomName = new Property(2, String.class, "gunRoomName", false, "GUN_ROOM_NAME");
        public final static Property Id = new Property(3, String.class, "id", false, "ID");
        public final static Property GunCabinetNo = new Property(4, String.class, "gunCabinetNo", false, "GUN_CABINET_NO");
    }

    private DaoSession daoSession;


    public CabInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CabInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAB_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: cId
                "\"GUN_CABINET_TYPE\" TEXT," + // 1: gunCabinetType
                "\"GUN_ROOM_NAME\" TEXT," + // 2: gunRoomName
                "\"ID\" TEXT," + // 3: id
                "\"GUN_CABINET_NO\" TEXT);"); // 4: gunCabinetNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAB_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CabInfoBean entity) {
        stmt.clearBindings();
 
        Long cId = entity.getCId();
        if (cId != null) {
            stmt.bindLong(1, cId);
        }
 
        String gunCabinetType = entity.getGunCabinetType();
        if (gunCabinetType != null) {
            stmt.bindString(2, gunCabinetType);
        }
 
        String gunRoomName = entity.getGunRoomName();
        if (gunRoomName != null) {
            stmt.bindString(3, gunRoomName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String gunCabinetNo = entity.getGunCabinetNo();
        if (gunCabinetNo != null) {
            stmt.bindString(5, gunCabinetNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CabInfoBean entity) {
        stmt.clearBindings();
 
        Long cId = entity.getCId();
        if (cId != null) {
            stmt.bindLong(1, cId);
        }
 
        String gunCabinetType = entity.getGunCabinetType();
        if (gunCabinetType != null) {
            stmt.bindString(2, gunCabinetType);
        }
 
        String gunRoomName = entity.getGunRoomName();
        if (gunRoomName != null) {
            stmt.bindString(3, gunRoomName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String gunCabinetNo = entity.getGunCabinetNo();
        if (gunCabinetNo != null) {
            stmt.bindString(5, gunCabinetNo);
        }
    }

    @Override
    protected final void attachEntity(CabInfoBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CabInfoBean readEntity(Cursor cursor, int offset) {
        CabInfoBean entity = new CabInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gunCabinetType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gunRoomName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // gunCabinetNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CabInfoBean entity, int offset) {
        entity.setCId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGunCabinetType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGunRoomName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGunCabinetNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CabInfoBean entity, long rowId) {
        entity.setCId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CabInfoBean entity) {
        if(entity != null) {
            return entity.getCId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CabInfoBean entity) {
        return entity.getCId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
