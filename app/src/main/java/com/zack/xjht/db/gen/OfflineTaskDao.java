package com.zack.xjht.db.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zack.xjht.entity.UserBean;

import com.zack.xjht.entity.OfflineTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OFFLINE_TASK".
*/
public class OfflineTaskDao extends AbstractDao<OfflineTask, Long> {

    public static final String TABLENAME = "OFFLINE_TASK";

    /**
     * Properties of entity OfflineTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartTime = new Property(1, long.class, "startTime", false, "START_TIME");
        public final static Property FinishTime = new Property(2, long.class, "finishTime", false, "FINISH_TIME");
        public final static Property TaskStatus = new Property(3, int.class, "taskStatus", false, "TASK_STATUS");
        public final static Property ApplyId = new Property(4, long.class, "applyId", false, "APPLY_ID");
        public final static Property ApproveId = new Property(5, long.class, "approveId", false, "APPROVE_ID");
        public final static Property UpdateTime = new Property(6, long.class, "updateTime", false, "UPDATE_TIME");
    }

    private DaoSession daoSession;


    public OfflineTaskDao(DaoConfig config) {
        super(config);
    }
    
    public OfflineTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OFFLINE_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"START_TIME\" INTEGER NOT NULL ," + // 1: startTime
                "\"FINISH_TIME\" INTEGER NOT NULL ," + // 2: finishTime
                "\"TASK_STATUS\" INTEGER NOT NULL ," + // 3: taskStatus
                "\"APPLY_ID\" INTEGER NOT NULL ," + // 4: applyId
                "\"APPROVE_ID\" INTEGER NOT NULL ," + // 5: approveId
                "\"UPDATE_TIME\" INTEGER NOT NULL );"); // 6: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OFFLINE_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OfflineTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStartTime());
        stmt.bindLong(3, entity.getFinishTime());
        stmt.bindLong(4, entity.getTaskStatus());
        stmt.bindLong(5, entity.getApplyId());
        stmt.bindLong(6, entity.getApproveId());
        stmt.bindLong(7, entity.getUpdateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OfflineTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStartTime());
        stmt.bindLong(3, entity.getFinishTime());
        stmt.bindLong(4, entity.getTaskStatus());
        stmt.bindLong(5, entity.getApplyId());
        stmt.bindLong(6, entity.getApproveId());
        stmt.bindLong(7, entity.getUpdateTime());
    }

    @Override
    protected final void attachEntity(OfflineTask entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OfflineTask readEntity(Cursor cursor, int offset) {
        OfflineTask entity = new OfflineTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // startTime
            cursor.getLong(offset + 2), // finishTime
            cursor.getInt(offset + 3), // taskStatus
            cursor.getLong(offset + 4), // applyId
            cursor.getLong(offset + 5), // approveId
            cursor.getLong(offset + 6) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OfflineTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartTime(cursor.getLong(offset + 1));
        entity.setFinishTime(cursor.getLong(offset + 2));
        entity.setTaskStatus(cursor.getInt(offset + 3));
        entity.setApplyId(cursor.getLong(offset + 4));
        entity.setApproveId(cursor.getLong(offset + 5));
        entity.setUpdateTime(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OfflineTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OfflineTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OfflineTask entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserBeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserBeanDao().getAllColumns());
            builder.append(" FROM OFFLINE_TASK T");
            builder.append(" LEFT JOIN USER_BEAN T0 ON T.\"APPLY_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN USER_BEAN T1 ON T.\"APPROVE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OfflineTask loadCurrentDeep(Cursor cursor, boolean lock) {
        OfflineTask entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserBean apply = loadCurrentOther(daoSession.getUserBeanDao(), cursor, offset);
         if(apply != null) {
            entity.setApply(apply);
        }
        offset += daoSession.getUserBeanDao().getAllColumns().length;

        UserBean approve = loadCurrentOther(daoSession.getUserBeanDao(), cursor, offset);
         if(approve != null) {
            entity.setApprove(approve);
        }

        return entity;    
    }

    public OfflineTask loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OfflineTask> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OfflineTask> list = new ArrayList<OfflineTask>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OfflineTask> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OfflineTask> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
